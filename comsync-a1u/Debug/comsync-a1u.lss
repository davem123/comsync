
comsync-a1u.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d50  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00802000  00802000  00000dc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004513  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000857  00000000  00000000  00005497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a54  00000000  00000000  00005cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00007744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ed59  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000916  00000000  00000000  00036811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00037127  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a81d  00000000  00000000  00037227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	df c4       	rjmp	.+2494   	; 0xa00 <__vector_16>
  42:	00 00       	nop
  44:	ec c4       	rjmp	.+2520   	; 0xa1e <__vector_17>
  46:	00 00       	nop
  48:	f9 c4       	rjmp	.+2546   	; 0xa3c <__vector_18>
  4a:	00 00       	nop
  4c:	06 c5       	rjmp	.+2572   	; 0xa5a <__vector_19>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	63 c5       	rjmp	.+2758   	; 0xb2c <__vector_25>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	19 c5       	rjmp	.+2610   	; 0xaf0 <__vector_47>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	9d c4       	rjmp	.+2362   	; 0xa78 <__vector_79>
 13e:	00 00       	nop
 140:	aa c4       	rjmp	.+2388   	; 0xa96 <__vector_80>
 142:	00 00       	nop
 144:	b7 c4       	rjmp	.+2414   	; 0xab4 <__vector_81>
 146:	00 00       	nop
 148:	c4 c4       	rjmp	.+2440   	; 0xad2 <__vector_82>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	ae c4       	rjmp	.+2396   	; 0xb0e <__vector_108>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a5 33       	cpi	r26, 0x35	; 53
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	b7 d4       	rcall	.+2414   	; 0xb94 <main>
 226:	92 c5       	rjmp	.+2852   	; 0xd4c <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <delay1ms>:
// if you call _delay_ms(variable) then the floating point library
// is going to be included and your output file gets much larger
// source: http://efundies.com/accurate-delays-with-avr-in-c/
void delay1ms(uint16_t ms) {
    uint16_t i;
    for(i=0;i<ms;i++) _delay_ms(1);
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	69 f0       	breq	.+26     	; 0x248 <delay1ms+0x1e>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	ef e3       	ldi	r30, 0x3F	; 63
 234:	ff e1       	ldi	r31, 0x1F	; 31
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <delay1ms+0xc>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <delay1ms+0x12>
 23c:	00 00       	nop
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	28 17       	cp	r18, r24
 244:	39 07       	cpc	r19, r25
 246:	a9 f7       	brne	.-22     	; 0x232 <delay1ms+0x8>
 248:	08 95       	ret

0000024a <dma_init>:
// ===========================================================

void dma_init(void) {

	// Wait for the DMA controller to finish whatever it's doing
	while (DMA.STATUS != 0);
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	84 81       	ldd	r24, Z+4	; 0x04
 250:	81 11       	cpse	r24, r1
 252:	fd cf       	rjmp	.-6      	; 0x24e <dma_init+0x4>

	// Disable the DMA controller while configuring
	DMA.CTRL &= ~DMA_ENABLE_bm;
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	80 81       	ld	r24, Z
 25a:	8f 77       	andi	r24, 0x7F	; 127
 25c:	80 83       	st	Z, r24

	// Reset the DMA controller. Clears all registers.
	DMA.CTRL |= DMA_RESET_bm;
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	80 83       	st	Z, r24

	//====================
	//Tau0 DMA setup
	//====================
	// Repeat forever
	DMA.CH0.REPCNT = 0;
 264:	16 8a       	std	Z+22, r1	; 0x16
	
	// Enable Channel 0, repeat mode, 2-byte burst.
	DMA.CH0.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm;
 266:	85 ea       	ldi	r24, 0xA5	; 165
 268:	80 8b       	std	Z+16, r24	; 0x10

	// Set "transfer count" aka number of bytes per block transfer
	DMA.CH0.TRFCNTL = 0x02;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	84 8b       	std	Z+20, r24	; 0x14
	DMA.CH0.TRFCNTH = 0x00;
 26e:	15 8a       	std	Z+21, r1	; 0x15

	// Reload source and destination address after every block, increment source and destination address
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
 270:	85 e5       	ldi	r24, 0x55	; 85
 272:	82 8b       	std	Z+18, r24	; 0x12

	// DMA transfer triggered by Timer overflow interrupt
	// Select the most significant timer
	if (MASTERH.PER > 0) {
 274:	80 91 26 09 	lds	r24, 0x0926
 278:	90 91 27 09 	lds	r25, 0x0927
 27c:	89 2b       	or	r24, r25
 27e:	21 f0       	breq	.+8      	; 0x288 <dma_init+0x3e>
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_TCD0_CCA_gc;
 280:	82 e6       	ldi	r24, 0x62	; 98
 282:	80 93 13 01 	sts	0x0113, r24
 286:	03 c0       	rjmp	.+6      	; 0x28e <dma_init+0x44>
	}
	else{
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_TCC0_CCA_gc;
 288:	82 e4       	ldi	r24, 0x42	; 66
 28a:	80 93 13 01 	sts	0x0113, r24
	}

	// Source: CLOCK0.CCA
	DMA.CH0.SRCADDR0 = ( ( (uint16_t) CLOCK0_CCA_ADDR) >> 0 ) & 0xFF;
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	88 e6       	ldi	r24, 0x68	; 104
 294:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = ( ( (uint16_t) CLOCK0_CCA_ADDR) >> 8 ) & 0xFF;
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0;
 29a:	12 8e       	std	Z+26, r1	; 0x1a

	// Destination: CLOCK0.CNT
	DMA.CH0.DESTADDR0 = ( ( (uint16_t) CLOCK0_CNT_ADDR) >> 0 ) & 0xFF;
 29c:	90 e6       	ldi	r25, 0x60	; 96
 29e:	94 8f       	std	Z+28, r25	; 0x1c
	DMA.CH0.DESTADDR1 = ( ( (uint16_t) CLOCK0_CNT_ADDR) >> 8 ) & 0xFF;
 2a0:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
 2a2:	16 8e       	std	Z+30, r1	; 0x1e

	//====================
	//Tau1 DMA setup
	//====================
	// Repeat forever
	DMA.CH1.REPCNT = 0;
 2a4:	16 a2       	std	Z+38, r1	; 0x26
	
	// Enable Channel 1, repeat mode, 2-byte burst.
	DMA.CH1.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_REPEAT_bm;
 2a6:	81 ea       	ldi	r24, 0xA1	; 161
 2a8:	80 a3       	std	Z+32, r24	; 0x20

	// Set "transfer count" aka number of bytes per block transfer
	DMA.CH1.TRFCNTL = 0x02;
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	84 a3       	std	Z+36, r24	; 0x24
	DMA.CH1.TRFCNTH = 0x00;
 2ae:	15 a2       	std	Z+37, r1	; 0x25

	// Reload source and destination address after every block, increment source and destination address
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
 2b0:	85 e5       	ldi	r24, 0x55	; 85
 2b2:	82 a3       	std	Z+34, r24	; 0x22


	// DMA transfer triggered by COUNTER1 overflow if 32-bit period is > 0x0000FFFF (i.e. >2047us)
	if (MASTERH.PER > 0) {
 2b4:	80 91 26 09 	lds	r24, 0x0926
 2b8:	90 91 27 09 	lds	r25, 0x0927
 2bc:	89 2b       	or	r24, r25
 2be:	21 f0       	breq	.+8      	; 0x2c8 <dma_init+0x7e>
		DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_TCE0_OVF_gc;
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	80 93 23 01 	sts	0x0123, r24
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <dma_init+0x90>
	}
	// DMA transfer triggered by CCB (TAU1_VECT) interrupt if 32-bit period is <= 0x0000FFFF (i.e. <2047us)
	else if (MASTERH.PER == 0){
 2c8:	80 91 26 09 	lds	r24, 0x0926
 2cc:	90 91 27 09 	lds	r25, 0x0927
 2d0:	89 2b       	or	r24, r25
 2d2:	19 f4       	brne	.+6      	; 0x2da <dma_init+0x90>
		DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_TCC0_CCB_gc;
 2d4:	83 e4       	ldi	r24, 0x43	; 67
 2d6:	80 93 23 01 	sts	0x0123, r24
	}

	// Source: CLOCK1.CCA
	DMA.CH1.SRCADDR0 = ( ( (uint16_t) CLOCK1_CCA_ADDR) >> 0 ) & 0xFF;
 2da:	e0 e0       	ldi	r30, 0x00	; 0
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	88 e6       	ldi	r24, 0x68	; 104
 2e0:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = ( ( (uint16_t) CLOCK1_CCA_ADDR) >> 8 ) & 0xFF;
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	81 a7       	std	Z+41, r24	; 0x29
	DMA.CH1.SRCADDR2 = 0;
 2e6:	12 a6       	std	Z+42, r1	; 0x2a

	// Destination: CLOCK1.CNT
	DMA.CH1.DESTADDR0 = ( ( (uint16_t) CLOCK1_CNT_ADDR) >> 0 ) & 0xFF;
 2e8:	90 e6       	ldi	r25, 0x60	; 96
 2ea:	94 a7       	std	Z+44, r25	; 0x2c
	DMA.CH1.DESTADDR1 = ( ( (uint16_t) CLOCK1_CNT_ADDR) >> 8 ) & 0xFF;
 2ec:	85 a7       	std	Z+45, r24	; 0x2d
	DMA.CH1.DESTADDR2 = 0;
 2ee:	16 a6       	std	Z+46, r1	; 0x2e

	//====================
	//Tau2 DMA setup
	//====================
	// Repeat forever
	DMA.CH2.REPCNT = 0;
 2f0:	16 aa       	std	Z+54, r1	; 0x36
	
	// Enable Channel 2, repeat mode, 2-byte burst.
	DMA.CH2.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_REPEAT_bm;
 2f2:	81 ea       	ldi	r24, 0xA1	; 161
 2f4:	80 ab       	std	Z+48, r24	; 0x30

	// Set "transfer count" aka number of bytes per block transfer
	DMA.CH2.TRFCNTL = 0x02;
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	84 ab       	std	Z+52, r24	; 0x34
	DMA.CH2.TRFCNTH = 0x00;
 2fa:	15 aa       	std	Z+53, r1	; 0x35

	// Reload source and destination address after every block, increment source and destination address
	DMA.CH2.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
 2fc:	85 e5       	ldi	r24, 0x55	; 85
 2fe:	82 ab       	std	Z+50, r24	; 0x32

	// DMA transfer triggered by COUNTER1 overflow if 32-bit period is > 0x0000FFFF (i.e. >2047us)
	if (MASTERH.PER > 0) {
 300:	80 91 26 09 	lds	r24, 0x0926
 304:	90 91 27 09 	lds	r25, 0x0927
 308:	89 2b       	or	r24, r25
 30a:	21 f0       	breq	.+8      	; 0x314 <dma_init+0xca>
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_TCF0_OVF_gc;
 30c:	80 ea       	ldi	r24, 0xA0	; 160
 30e:	80 93 33 01 	sts	0x0133, r24
 312:	09 c0       	rjmp	.+18     	; 0x326 <dma_init+0xdc>
	}
	// DMA transfer triggered by CCB (TAU1_VECT) interrupt if 32-bit period is <= 0x0000FFFF (i.e. <2047us)
	else if (MASTERH.PER == 0){
 314:	80 91 26 09 	lds	r24, 0x0926
 318:	90 91 27 09 	lds	r25, 0x0927
 31c:	89 2b       	or	r24, r25
 31e:	19 f4       	brne	.+6      	; 0x326 <dma_init+0xdc>
		DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_TCC0_CCC_gc;
 320:	84 e4       	ldi	r24, 0x44	; 68
 322:	80 93 33 01 	sts	0x0133, r24
	}

	// Source: CLOCK2.CCA
	DMA.CH2.SRCADDR0 = ( ( (uint16_t) CLOCK2_CCA_ADDR) >> 0 ) & 0xFF;
 326:	e0 e0       	ldi	r30, 0x00	; 0
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	88 e6       	ldi	r24, 0x68	; 104
 32c:	80 af       	std	Z+56, r24	; 0x38
	DMA.CH2.SRCADDR1 = ( ( (uint16_t) CLOCK2_CCA_ADDR) >> 8 ) & 0xFF;
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	81 af       	std	Z+57, r24	; 0x39
	DMA.CH2.SRCADDR2 = 0;
 332:	12 ae       	std	Z+58, r1	; 0x3a

	// Destination: CLOCK2.CNT
	DMA.CH2.DESTADDR0 = ( ( (uint16_t) CLOCK2_CNT_ADDR) >> 0 ) & 0xFF;
 334:	90 e6       	ldi	r25, 0x60	; 96
 336:	94 af       	std	Z+60, r25	; 0x3c
	DMA.CH2.DESTADDR1 = ( ( (uint16_t) CLOCK2_CNT_ADDR) >> 8 ) & 0xFF;
 338:	80 93 3d 01 	sts	0x013D, r24
	DMA.CH2.DESTADDR2 = 0;
 33c:	10 92 3e 01 	sts	0x013E, r1

	//====================
	//Tau3 DMA setup
	//====================
	// Repeat forever
	DMA.CH3.REPCNT = 0;
 340:	10 92 46 01 	sts	0x0146, r1
	
	// Enable Channel 3, repeat mode, 2-byte burst.
	DMA.CH3.CTRLA = DMA_CH_ENABLE_bm | DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_REPEAT_bm;
 344:	81 ea       	ldi	r24, 0xA1	; 161
 346:	80 93 40 01 	sts	0x0140, r24

	// Set "transfer count" aka number of bytes per block transfer
	DMA.CH3.TRFCNTL = 0x02;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 44 01 	sts	0x0144, r24
	DMA.CH3.TRFCNTH = 0x00;
 350:	10 92 45 01 	sts	0x0145, r1

	// Reload source and destination address after every block, increment source and destination address
	DMA.CH3.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
 354:	85 e5       	ldi	r24, 0x55	; 85
 356:	80 93 42 01 	sts	0x0142, r24

	// DMA transfer triggered by CCD (TAU3_VECT) interrupt
	// Select whichever MASTER timer has CCD enabled
	if (MASTERH.CTRLB & TC0_CCDEN_bm) {
 35a:	80 91 01 09 	lds	r24, 0x0901
 35e:	88 23       	and	r24, r24
 360:	24 f4       	brge	.+8      	; 0x36a <dma_init+0x120>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_TCD0_CCD_gc;
 362:	85 e6       	ldi	r24, 0x65	; 101
 364:	80 93 43 01 	sts	0x0143, r24
 368:	07 c0       	rjmp	.+14     	; 0x378 <dma_init+0x12e>
	}
	else if (MASTERL.CTRLB & TC0_CCDEN_bm){
 36a:	80 91 01 08 	lds	r24, 0x0801
 36e:	88 23       	and	r24, r24
 370:	1c f4       	brge	.+6      	; 0x378 <dma_init+0x12e>
		DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_TCC0_CCD_gc;
 372:	85 e4       	ldi	r24, 0x45	; 69
 374:	80 93 43 01 	sts	0x0143, r24
	}

	// Source: CLOCK3.CCA
	DMA.CH3.SRCADDR0 = ( ( (uint16_t) CLOCK3_CCA_ADDR) >> 0 ) & 0xFF;
 378:	88 e6       	ldi	r24, 0x68	; 104
 37a:	80 93 48 01 	sts	0x0148, r24
	DMA.CH3.SRCADDR1 = ( ( (uint16_t) CLOCK3_CCA_ADDR) >> 8 ) & 0xFF;
 37e:	8b e0       	ldi	r24, 0x0B	; 11
 380:	80 93 49 01 	sts	0x0149, r24
	DMA.CH3.SRCADDR2 = 0;
 384:	10 92 4a 01 	sts	0x014A, r1

	// Destination: CLOCK3.CNT
	DMA.CH3.DESTADDR0 = ( ( (uint16_t) CLOCK3_CNT_ADDR) >> 0 ) & 0xFF;
 388:	90 e6       	ldi	r25, 0x60	; 96
 38a:	90 93 4c 01 	sts	0x014C, r25
	DMA.CH3.DESTADDR1 = ( ( (uint16_t) CLOCK3_CNT_ADDR) >> 8 ) & 0xFF;
 38e:	80 93 4d 01 	sts	0x014D, r24
	DMA.CH3.DESTADDR2 = 0;
 392:	10 92 4e 01 	sts	0x014E, r1

	// Enable DMA controller, double buffer enabled on ch0/1 and ch2/3, 
	// Channel priority: Ch0 > Ch1 > Ch2 > Ch3
	DMA.CTRL = DMA_ENABLE_bm | DMA_DBUFMODE_DISABLED_gc | DMA_PRIMODE_CH0123_gc;
 396:	83 e8       	ldi	r24, 0x83	; 131
 398:	80 93 00 01 	sts	0x0100, r24
 39c:	08 95       	ret

0000039e <timers_master_init32>:
	// Waveform generator overrides regular port OUT when CCAEN is set.
	_SFR_MEM16(addr_ctrlb) |= (TC_WGMODE_SS_gc | TC0_CCAEN_bm);
	
	// Disable event actions - required for waveform generation mode
	_SFR_MEM16(addr_ctrld) &= TC_EVACT_OFF_gc;
}//end of timers_init_clock()
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	2c 97       	sbiw	r28, 0x0c	; 12
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	69 87       	std	Y+9, r22	; 0x09
 3ae:	7a 87       	std	Y+10, r23	; 0x0a
 3b0:	8b 87       	std	Y+11, r24	; 0x0b
 3b2:	9c 87       	std	Y+12, r25	; 0x0c
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	1a 82       	std	Y+2, r1	; 0x02
 3b8:	1b 82       	std	Y+3, r1	; 0x03
 3ba:	1c 82       	std	Y+4, r1	; 0x04
 3bc:	1d 82       	std	Y+5, r1	; 0x05
 3be:	1e 82       	std	Y+6, r1	; 0x06
 3c0:	1f 82       	std	Y+7, r1	; 0x07
 3c2:	18 86       	std	Y+8, r1	; 0x08
 3c4:	89 85       	ldd	r24, Y+9	; 0x09
 3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c8:	ab 85       	ldd	r26, Y+11	; 0x0b
 3ca:	bc 85       	ldd	r27, Y+12	; 0x0c
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	aa 1f       	adc	r26, r26
 3da:	bb 1f       	adc	r27, r27
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	aa 1f       	adc	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	ab 83       	std	Y+3, r26	; 0x03
 3fa:	bc 83       	std	Y+4, r27	; 0x04
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	ab 81       	ldd	r26, Y+3	; 0x03
 402:	bc 81       	ldd	r27, Y+4	; 0x04
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	a1 40       	sbci	r26, 0x01	; 1
 408:	b1 05       	cpc	r27, r1
 40a:	58 f0       	brcs	.+22     	; 0x422 <timers_master_init32+0x84>
 40c:	69 81       	ldd	r22, Y+1	; 0x01
 40e:	7a 81       	ldd	r23, Y+2	; 0x02
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	9c 81       	ldd	r25, Y+4	; 0x04
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	3f ef       	ldi	r19, 0xFF	; 255
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	10 d4       	rcall	.+2080   	; 0xc3e <__udivmodsi4>
 41e:	2d 83       	std	Y+5, r18	; 0x05
 420:	3e 83       	std	Y+6, r19	; 0x06
 422:	69 81       	ldd	r22, Y+1	; 0x01
 424:	7a 81       	ldd	r23, Y+2	; 0x02
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	9c 81       	ldd	r25, Y+4	; 0x04
 42a:	2d 81       	ldd	r18, Y+5	; 0x05
 42c:	3e 81       	ldd	r19, Y+6	; 0x06
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	03 d4       	rcall	.+2054   	; 0xc3e <__udivmodsi4>
 438:	2f 83       	std	Y+7, r18	; 0x07
 43a:	38 87       	std	Y+8, r19	; 0x08
 43c:	8f 81       	ldd	r24, Y+7	; 0x07
 43e:	98 85       	ldd	r25, Y+8	; 0x08
 440:	e0 e0       	ldi	r30, 0x00	; 0
 442:	f8 e0       	ldi	r31, 0x08	; 8
 444:	86 a3       	std	Z+38, r24	; 0x26
 446:	97 a3       	std	Z+39, r25	; 0x27
 448:	10 92 26 09 	sts	0x0926, r1
 44c:	10 92 27 09 	sts	0x0927, r1
 450:	80 81       	ld	r24, Z
 452:	80 7f       	andi	r24, 0xF0	; 240
 454:	81 60       	ori	r24, 0x01	; 1
 456:	80 83       	st	Z, r24
 458:	86 a1       	ldd	r24, Z+38	; 0x26
 45a:	97 a1       	ldd	r25, Z+39	; 0x27
 45c:	80 a7       	std	Z+40, r24	; 0x28
 45e:	91 a7       	std	Z+41, r25	; 0x29
 460:	81 81       	ldd	r24, Z+1	; 0x01
 462:	80 61       	ori	r24, 0x10	; 16
 464:	81 83       	std	Z+1, r24	; 0x01
 466:	87 81       	ldd	r24, Z+7	; 0x07
 468:	83 60       	ori	r24, 0x03	; 3
 46a:	87 83       	std	Z+7, r24	; 0x07
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	81 87       	std	Z+9, r24	; 0x09
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	9e 81       	ldd	r25, Y+6	; 0x06
 474:	89 2b       	or	r24, r25
 476:	59 f1       	breq	.+86     	; 0x4ce <timers_master_init32+0x130>
 478:	8d 81       	ldd	r24, Y+5	; 0x05
 47a:	9e 81       	ldd	r25, Y+6	; 0x06
 47c:	e0 e0       	ldi	r30, 0x00	; 0
 47e:	f9 e0       	ldi	r31, 0x09	; 9
 480:	86 a3       	std	Z+38, r24	; 0x26
 482:	97 a3       	std	Z+39, r25	; 0x27
 484:	a0 e8       	ldi	r26, 0x80	; 128
 486:	b1 e0       	ldi	r27, 0x01	; 1
 488:	8c 91       	ld	r24, X
 48a:	80 6c       	ori	r24, 0xC0	; 192
 48c:	8c 93       	st	X, r24
 48e:	80 81       	ld	r24, Z
 490:	80 7f       	andi	r24, 0xF0	; 240
 492:	88 60       	ori	r24, 0x08	; 8
 494:	80 83       	st	Z, r24
 496:	16 82       	std	Z+6, r1	; 0x06
 498:	a0 e0       	ldi	r26, 0x00	; 0
 49a:	b8 e0       	ldi	r27, 0x08	; 8
 49c:	11 96       	adiw	r26, 0x01	; 1
 49e:	8c 91       	ld	r24, X
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	8f 7e       	andi	r24, 0xEF	; 239
 4a4:	11 96       	adiw	r26, 0x01	; 1
 4a6:	8c 93       	st	X, r24
 4a8:	11 97       	sbiw	r26, 0x01	; 1
 4aa:	17 96       	adiw	r26, 0x07	; 7
 4ac:	8c 91       	ld	r24, X
 4ae:	17 97       	sbiw	r26, 0x07	; 7
 4b0:	8c 7f       	andi	r24, 0xFC	; 252
 4b2:	17 96       	adiw	r26, 0x07	; 7
 4b4:	8c 93       	st	X, r24
 4b6:	86 a1       	ldd	r24, Z+38	; 0x26
 4b8:	97 a1       	ldd	r25, Z+39	; 0x27
 4ba:	80 a7       	std	Z+40, r24	; 0x28
 4bc:	91 a7       	std	Z+41, r25	; 0x29
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	81 83       	std	Z+1, r24	; 0x01
 4c4:	87 81       	ldd	r24, Z+7	; 0x07
 4c6:	83 60       	ori	r24, 0x03	; 3
 4c8:	87 83       	std	Z+7, r24	; 0x07
 4ca:	88 e0       	ldi	r24, 0x08	; 8
 4cc:	81 87       	std	Z+9, r24	; 0x09
 4ce:	40 e8       	ldi	r20, 0x80	; 128
 4d0:	51 e0       	ldi	r21, 0x01	; 1
 4d2:	fa 01       	movw	r30, r20
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	85 6c       	ori	r24, 0xC5	; 197
 4d8:	81 83       	std	Z+1, r24	; 0x01
 4da:	a0 e0       	ldi	r26, 0x00	; 0
 4dc:	ba e0       	ldi	r27, 0x0A	; 10
 4de:	8c 91       	ld	r24, X
 4e0:	80 7f       	andi	r24, 0xF0	; 240
 4e2:	89 60       	ori	r24, 0x09	; 9
 4e4:	8c 93       	st	X, r24
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	39 e0       	ldi	r19, 0x09	; 9
 4ea:	f9 01       	movw	r30, r18
 4ec:	86 a1       	ldd	r24, Z+38	; 0x26
 4ee:	97 a1       	ldd	r25, Z+39	; 0x27
 4f0:	96 96       	adiw	r26, 0x26	; 38
 4f2:	8d 93       	st	X+, r24
 4f4:	9c 93       	st	X, r25
 4f6:	97 97       	sbiw	r26, 0x27	; 39
 4f8:	93 e0       	ldi	r25, 0x03	; 3
 4fa:	16 96       	adiw	r26, 0x06	; 6
 4fc:	9c 93       	st	X, r25
 4fe:	16 97       	sbiw	r26, 0x06	; 6
 500:	fa 01       	movw	r30, r20
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	86 6c       	ori	r24, 0xC6	; 198
 506:	82 83       	std	Z+2, r24	; 0x02
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	7b e0       	ldi	r23, 0x0B	; 11
 50c:	fb 01       	movw	r30, r22
 50e:	80 81       	ld	r24, Z
 510:	80 7f       	andi	r24, 0xF0	; 240
 512:	8a 60       	ori	r24, 0x0A	; 10
 514:	80 83       	st	Z, r24
 516:	f9 01       	movw	r30, r18
 518:	46 a1       	ldd	r20, Z+38	; 0x26
 51a:	57 a1       	ldd	r21, Z+39	; 0x27
 51c:	fb 01       	movw	r30, r22
 51e:	46 a3       	std	Z+38, r20	; 0x26
 520:	57 a3       	std	Z+39, r21	; 0x27
 522:	96 83       	std	Z+6, r25	; 0x06
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	80 93 09 08 	sts	0x0809, r24
 52a:	f9 01       	movw	r30, r18
 52c:	81 87       	std	Z+9, r24	; 0x09
 52e:	19 96       	adiw	r26, 0x09	; 9
 530:	8c 93       	st	X, r24
 532:	fb 01       	movw	r30, r22
 534:	81 87       	std	Z+9, r24	; 0x09
 536:	89 de       	rcall	.-750    	; 0x24a <dma_init>
 538:	2c 96       	adiw	r28, 0x0c	; 12
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <timers_tau_init32>:
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	25 97       	sbiw	r28, 0x05	; 5
 552:	cd bf       	out	0x3d, r28	; 61
 554:	de bf       	out	0x3e, r29	; 62
 556:	96 2f       	mov	r25, r22
 558:	ba 01       	movw	r22, r20
 55a:	a9 01       	movw	r20, r18
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	66 1f       	adc	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	66 1f       	adc	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	44 0f       	add	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	66 1f       	adc	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	66 1f       	adc	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	49 83       	std	Y+1, r20	; 0x01
 586:	5a 83       	std	Y+2, r21	; 0x02
 588:	6b 83       	std	Y+3, r22	; 0x03
 58a:	7c 83       	std	Y+4, r23	; 0x04
 58c:	49 81       	ldd	r20, Y+1	; 0x01
 58e:	5a 81       	ldd	r21, Y+2	; 0x02
 590:	6b 81       	ldd	r22, Y+3	; 0x03
 592:	7c 81       	ldd	r23, Y+4	; 0x04
 594:	41 15       	cp	r20, r1
 596:	51 05       	cpc	r21, r1
 598:	61 40       	sbci	r22, 0x01	; 1
 59a:	71 05       	cpc	r23, r1
 59c:	40 f0       	brcs	.+16     	; 0x5ae <timers_tau_init32+0x6a>
 59e:	a9 2f       	mov	r26, r25
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	b7 5f       	subi	r27, 0xF7	; 247
 5a4:	e7 e0       	ldi	r30, 0x07	; 7
 5a6:	f9 e0       	ldi	r31, 0x09	; 9
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	59 e0       	ldi	r21, 0x09	; 9
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <timers_tau_init32+0x78>
 5ae:	a9 2f       	mov	r26, r25
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	b8 5f       	subi	r27, 0xF8	; 248
 5b4:	e7 e0       	ldi	r30, 0x07	; 7
 5b6:	f8 e0       	ldi	r31, 0x08	; 8
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	58 e0       	ldi	r21, 0x08	; 8
 5bc:	09 81       	ldd	r16, Y+1	; 0x01
 5be:	1a 81       	ldd	r17, Y+2	; 0x02
 5c0:	2b 81       	ldd	r18, Y+3	; 0x03
 5c2:	3c 81       	ldd	r19, Y+4	; 0x04
 5c4:	0d 93       	st	X+, r16
 5c6:	1c 93       	st	X, r17
 5c8:	da 01       	movw	r26, r20
 5ca:	2d 91       	ld	r18, X+
 5cc:	3c 91       	ld	r19, X
 5ce:	11 97       	sbiw	r26, 0x01	; 1
 5d0:	28 2b       	or	r18, r24
 5d2:	2d 93       	st	X+, r18
 5d4:	3c 93       	st	X, r19
 5d6:	8d ec       	ldi	r24, 0xCD	; 205
 5d8:	98 9f       	mul	r25, r24
 5da:	81 2d       	mov	r24, r1
 5dc:	11 24       	eor	r1, r1
 5de:	82 95       	swap	r24
 5e0:	86 95       	lsr	r24
 5e2:	87 70       	andi	r24, 0x07	; 7
 5e4:	b8 e2       	ldi	r27, 0x28	; 40
 5e6:	8b 9f       	mul	r24, r27
 5e8:	90 19       	sub	r25, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	23 e0       	ldi	r18, 0x03	; 3
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	a9 01       	movw	r20, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <timers_tau_init32+0xb4>
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	9a 95       	dec	r25
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <timers_tau_init32+0xb0>
 5fc:	4d 83       	std	Y+5, r20	; 0x05
 5fe:	2d 81       	ldd	r18, Y+5	; 0x05
 600:	80 81       	ld	r24, Z
 602:	91 81       	ldd	r25, Z+1	; 0x01
 604:	82 2b       	or	r24, r18
 606:	80 83       	st	Z, r24
 608:	91 83       	std	Z+1, r25	; 0x01
 60a:	1f de       	rcall	.-962    	; 0x24a <dma_init>
 60c:	25 96       	adiw	r28, 0x05	; 5
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	de bf       	out	0x3e, r29	; 62
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	08 95       	ret

0000061c <timers_init_all_clocks>:
							volatile uint8_t *addr_ctrld,
							uint8_t clksel_bm
						) {

	// PER controls the PWM period
	_SFR_MEM16(addr_per) = 65534;
 61c:	4e ef       	ldi	r20, 0xFE	; 254
 61e:	5f ef       	ldi	r21, 0xFF	; 255
 620:	40 93 66 08 	sts	0x0866, r20
 624:	50 93 67 08 	sts	0x0867, r21

	// CCA controls the PWM duty cycle
	_SFR_MEM16(addr_cca) = 65535;
 628:	2f ef       	ldi	r18, 0xFF	; 255
 62a:	3f ef       	ldi	r19, 0xFF	; 255
 62c:	20 93 68 08 	sts	0x0868, r18
 630:	30 93 69 08 	sts	0x0869, r19

	// Invert the output pin to get a positive pulse
	_SFR_MEM16(addr_clockpin) |= PORT_INVEN_bm;
 634:	e4 e5       	ldi	r30, 0x54	; 84
 636:	f6 e0       	ldi	r31, 0x06	; 6
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	80 64       	ori	r24, 0x40	; 64
 63e:	80 83       	st	Z, r24
 640:	91 83       	std	Z+1, r25	; 0x01

	// Start CLOCKn with Clk/1 prescaling
	_SFR_MEM16(addr_ctrla) |= clksel_bm;
 642:	e0 e4       	ldi	r30, 0x40	; 64
 644:	f8 e0       	ldi	r31, 0x08	; 8
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	84 60       	ori	r24, 0x04	; 4
 64c:	80 83       	st	Z, r24
 64e:	91 83       	std	Z+1, r25	; 0x01

	// Enable single-slope generation mode and capture/compare channel A
	// Waveform generator overrides regular port OUT when CCAEN is set.
	_SFR_MEM16(addr_ctrlb) |= (TC_WGMODE_SS_gc | TC0_CCAEN_bm);
 650:	a1 e4       	ldi	r26, 0x41	; 65
 652:	b8 e0       	ldi	r27, 0x08	; 8
 654:	8d 91       	ld	r24, X+
 656:	9c 91       	ld	r25, X
 658:	11 97       	sbiw	r26, 0x01	; 1
 65a:	83 61       	ori	r24, 0x13	; 19
 65c:	8d 93       	st	X+, r24
 65e:	9c 93       	st	X, r25
	
	// Disable event actions - required for waveform generation mode
	_SFR_MEM16(addr_ctrld) &= TC_EVACT_OFF_gc;
 660:	a3 e4       	ldi	r26, 0x43	; 67
 662:	b8 e0       	ldi	r27, 0x08	; 8
 664:	8d 91       	ld	r24, X+
 666:	9c 91       	ld	r25, X
 668:	11 97       	sbiw	r26, 0x01	; 1
 66a:	1d 92       	st	X+, r1
 66c:	1c 92       	st	X, r1
							&CLOCK0.CTRLA,		//Address of CLOCK0.CTRLA
							&CLOCK0.CTRLB,		//Address of CLOCK0.CTRLB
							&CLOCK0.CTRLD,		//Address of CLOCK0.CTRLD
							TC_CLKSEL_DIV8_gc	//Timer prescaler bitmask
						);
	CLOCK0.CTRLFSET = TC_CMD_RESTART_gc;
 66e:	88 e0       	ldi	r24, 0x08	; 8
 670:	81 87       	std	Z+9, r24	; 0x09
							volatile uint8_t *addr_ctrld,
							uint8_t clksel_bm
						) {

	// PER controls the PWM period
	_SFR_MEM16(addr_per) = 65534;
 672:	40 93 66 09 	sts	0x0966, r20
 676:	50 93 67 09 	sts	0x0967, r21

	// CCA controls the PWM duty cycle
	_SFR_MEM16(addr_cca) = 65535;
 67a:	20 93 68 09 	sts	0x0968, r18
 67e:	30 93 69 09 	sts	0x0969, r19

	// Invert the output pin to get a positive pulse
	_SFR_MEM16(addr_clockpin) |= PORT_INVEN_bm;
 682:	a4 e7       	ldi	r26, 0x74	; 116
 684:	b6 e0       	ldi	r27, 0x06	; 6
 686:	6d 91       	ld	r22, X+
 688:	7c 91       	ld	r23, X
 68a:	11 97       	sbiw	r26, 0x01	; 1
 68c:	60 64       	ori	r22, 0x40	; 64
 68e:	6d 93       	st	X+, r22
 690:	7c 93       	st	X, r23

	// Start CLOCKn with Clk/1 prescaling
	_SFR_MEM16(addr_ctrla) |= clksel_bm;
 692:	a0 e4       	ldi	r26, 0x40	; 64
 694:	b9 e0       	ldi	r27, 0x09	; 9
 696:	6d 91       	ld	r22, X+
 698:	7c 91       	ld	r23, X
 69a:	11 97       	sbiw	r26, 0x01	; 1
 69c:	64 60       	ori	r22, 0x04	; 4
 69e:	6d 93       	st	X+, r22
 6a0:	7c 93       	st	X, r23

	// Enable single-slope generation mode and capture/compare channel A
	// Waveform generator overrides regular port OUT when CCAEN is set.
	_SFR_MEM16(addr_ctrlb) |= (TC_WGMODE_SS_gc | TC0_CCAEN_bm);
 6a2:	a1 e4       	ldi	r26, 0x41	; 65
 6a4:	b9 e0       	ldi	r27, 0x09	; 9
 6a6:	6d 91       	ld	r22, X+
 6a8:	7c 91       	ld	r23, X
 6aa:	11 97       	sbiw	r26, 0x01	; 1
 6ac:	63 61       	ori	r22, 0x13	; 19
 6ae:	6d 93       	st	X+, r22
 6b0:	7c 93       	st	X, r23
	
	// Disable event actions - required for waveform generation mode
	_SFR_MEM16(addr_ctrld) &= TC_EVACT_OFF_gc;
 6b2:	a3 e4       	ldi	r26, 0x43	; 67
 6b4:	b9 e0       	ldi	r27, 0x09	; 9
 6b6:	6d 91       	ld	r22, X+
 6b8:	7c 91       	ld	r23, X
 6ba:	11 97       	sbiw	r26, 0x01	; 1
 6bc:	1d 92       	st	X+, r1
 6be:	1c 92       	st	X, r1
							&CLOCK1.CTRLA,
							&CLOCK1.CTRLB,
							&CLOCK1.CTRLD,
							TC_CLKSEL_DIV8_gc
						);
	CLOCK0.CTRLFSET = TC_CMD_RESTART_gc;
 6c0:	81 87       	std	Z+9, r24	; 0x09
							volatile uint8_t *addr_ctrld,
							uint8_t clksel_bm
						) {

	// PER controls the PWM period
	_SFR_MEM16(addr_per) = 65534;
 6c2:	40 93 66 0a 	sts	0x0A66, r20
 6c6:	50 93 67 0a 	sts	0x0A67, r21

	// CCA controls the PWM duty cycle
	_SFR_MEM16(addr_cca) = 65535;
 6ca:	20 93 68 0a 	sts	0x0A68, r18
 6ce:	30 93 69 0a 	sts	0x0A69, r19

	// Invert the output pin to get a positive pulse
	_SFR_MEM16(addr_clockpin) |= PORT_INVEN_bm;
 6d2:	a4 e9       	ldi	r26, 0x94	; 148
 6d4:	b6 e0       	ldi	r27, 0x06	; 6
 6d6:	6d 91       	ld	r22, X+
 6d8:	7c 91       	ld	r23, X
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	60 64       	ori	r22, 0x40	; 64
 6de:	6d 93       	st	X+, r22
 6e0:	7c 93       	st	X, r23

	// Start CLOCKn with Clk/1 prescaling
	_SFR_MEM16(addr_ctrla) |= clksel_bm;
 6e2:	a0 e4       	ldi	r26, 0x40	; 64
 6e4:	ba e0       	ldi	r27, 0x0A	; 10
 6e6:	6d 91       	ld	r22, X+
 6e8:	7c 91       	ld	r23, X
 6ea:	11 97       	sbiw	r26, 0x01	; 1
 6ec:	64 60       	ori	r22, 0x04	; 4
 6ee:	6d 93       	st	X+, r22
 6f0:	7c 93       	st	X, r23

	// Enable single-slope generation mode and capture/compare channel A
	// Waveform generator overrides regular port OUT when CCAEN is set.
	_SFR_MEM16(addr_ctrlb) |= (TC_WGMODE_SS_gc | TC0_CCAEN_bm);
 6f2:	a1 e4       	ldi	r26, 0x41	; 65
 6f4:	ba e0       	ldi	r27, 0x0A	; 10
 6f6:	6d 91       	ld	r22, X+
 6f8:	7c 91       	ld	r23, X
 6fa:	11 97       	sbiw	r26, 0x01	; 1
 6fc:	63 61       	ori	r22, 0x13	; 19
 6fe:	6d 93       	st	X+, r22
 700:	7c 93       	st	X, r23
	
	// Disable event actions - required for waveform generation mode
	_SFR_MEM16(addr_ctrld) &= TC_EVACT_OFF_gc;
 702:	a3 e4       	ldi	r26, 0x43	; 67
 704:	ba e0       	ldi	r27, 0x0A	; 10
 706:	6d 91       	ld	r22, X+
 708:	7c 91       	ld	r23, X
 70a:	11 97       	sbiw	r26, 0x01	; 1
 70c:	1d 92       	st	X+, r1
 70e:	1c 92       	st	X, r1
							&CLOCK2.CTRLA,
							&CLOCK2.CTRLB,
							&CLOCK2.CTRLD,
							TC_CLKSEL_DIV8_gc
						);
	CLOCK0.CTRLFSET = TC_CMD_RESTART_gc;
 710:	81 87       	std	Z+9, r24	; 0x09
							volatile uint8_t *addr_ctrld,
							uint8_t clksel_bm
						) {

	// PER controls the PWM period
	_SFR_MEM16(addr_per) = 65534;
 712:	40 93 66 0b 	sts	0x0B66, r20
 716:	50 93 67 0b 	sts	0x0B67, r21

	// CCA controls the PWM duty cycle
	_SFR_MEM16(addr_cca) = 65535;
 71a:	20 93 68 0b 	sts	0x0B68, r18
 71e:	30 93 69 0b 	sts	0x0B69, r19

	// Invert the output pin to get a positive pulse
	_SFR_MEM16(addr_clockpin) |= PORT_INVEN_bm;
 722:	a4 eb       	ldi	r26, 0xB4	; 180
 724:	b6 e0       	ldi	r27, 0x06	; 6
 726:	2d 91       	ld	r18, X+
 728:	3c 91       	ld	r19, X
 72a:	11 97       	sbiw	r26, 0x01	; 1
 72c:	20 64       	ori	r18, 0x40	; 64
 72e:	2d 93       	st	X+, r18
 730:	3c 93       	st	X, r19

	// Start CLOCKn with Clk/1 prescaling
	_SFR_MEM16(addr_ctrla) |= clksel_bm;
 732:	a0 e4       	ldi	r26, 0x40	; 64
 734:	bb e0       	ldi	r27, 0x0B	; 11
 736:	2d 91       	ld	r18, X+
 738:	3c 91       	ld	r19, X
 73a:	11 97       	sbiw	r26, 0x01	; 1
 73c:	24 60       	ori	r18, 0x04	; 4
 73e:	2d 93       	st	X+, r18
 740:	3c 93       	st	X, r19

	// Enable single-slope generation mode and capture/compare channel A
	// Waveform generator overrides regular port OUT when CCAEN is set.
	_SFR_MEM16(addr_ctrlb) |= (TC_WGMODE_SS_gc | TC0_CCAEN_bm);
 742:	a1 e4       	ldi	r26, 0x41	; 65
 744:	bb e0       	ldi	r27, 0x0B	; 11
 746:	2d 91       	ld	r18, X+
 748:	3c 91       	ld	r19, X
 74a:	11 97       	sbiw	r26, 0x01	; 1
 74c:	23 61       	ori	r18, 0x13	; 19
 74e:	2d 93       	st	X+, r18
 750:	3c 93       	st	X, r19
	
	// Disable event actions - required for waveform generation mode
	_SFR_MEM16(addr_ctrld) &= TC_EVACT_OFF_gc;
 752:	a3 e4       	ldi	r26, 0x43	; 67
 754:	bb e0       	ldi	r27, 0x0B	; 11
 756:	2d 91       	ld	r18, X+
 758:	3c 91       	ld	r19, X
 75a:	11 97       	sbiw	r26, 0x01	; 1
 75c:	1d 92       	st	X+, r1
 75e:	1c 92       	st	X, r1
							&CLOCK3.CTRLA,
							&CLOCK3.CTRLB,
							&CLOCK3.CTRLD,
							TC_CLKSEL_DIV8_gc
						);
	CLOCK0.CTRLFSET = TC_CMD_RESTART_gc;
 760:	81 87       	std	Z+9, r24	; 0x09
 762:	08 95       	ret

00000764 <timers_set_pulse_width>:
//
// Example: set_pulse_width(1,350)
// ===========================================================
void timers_set_pulse_width(volatile uint16_t *addr_cca,
							volatile uint16_t *addr_per,
							volatile uint16_t pulse_width_us) {
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	1f 92       	push	r1
 76a:	1f 92       	push	r1
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	49 83       	std	Y+1, r20	; 0x01
 772:	5a 83       	std	Y+2, r21	; 0x02
	// maximum pulse width (us) = (2^16 / F_CPU_MHZ) - 1 = 2047us

	// pulse width (cycles) = pulse_width_us * timer_clock(MHz)
	// where timer_clock = F_CPU / prescaler
	
	pulse_width_cycles = pulse_width_us * (F_CPU_MHZ / 8);
 774:	29 81       	ldd	r18, Y+1	; 0x01
 776:	3a 81       	ldd	r19, Y+2	; 0x02
 778:	22 0f       	add	r18, r18
 77a:	33 1f       	adc	r19, r19
 77c:	22 0f       	add	r18, r18
 77e:	33 1f       	adc	r19, r19
	
	// pulse width (cycles) = TOP - CCA
	cca_value = (65535 - pulse_width_cycles);
 780:	20 95       	com	r18
 782:	30 95       	com	r19

	// CCA controls the PWM duty cycle
	_SFR_MEM16(addr_cca) = cca_value;
 784:	fc 01       	movw	r30, r24
 786:	20 83       	st	Z, r18
 788:	31 83       	std	Z+1, r19	; 0x01
	_SFR_MEM16(addr_per) = cca_value - 1;
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	31 09       	sbc	r19, r1
 78e:	fb 01       	movw	r30, r22
 790:	20 83       	st	Z, r18
 792:	31 83       	std	Z+1, r19	; 0x01

}//end of set_pulse_width()
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <usart_init>:
// ===========================================================
// Turns off all of the pulse outputs, including the master
// ===========================================================
void usart_disable_outputs(void) {
	
	MASTERL.CTRLA = ( MASTERL.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
 79e:	e0 e4       	ldi	r30, 0x40	; 64
 7a0:	f6 e0       	ldi	r31, 0x06	; 6
 7a2:	88 e0       	ldi	r24, 0x08	; 8
 7a4:	81 83       	std	Z+1, r24	; 0x01
 7a6:	84 e0       	ldi	r24, 0x04	; 4
 7a8:	82 83       	std	Z+2, r24	; 0x02
 7aa:	e0 ea       	ldi	r30, 0xA0	; 160
 7ac:	f8 e0       	ldi	r31, 0x08	; 8
 7ae:	83 e0       	ldi	r24, 0x03	; 3
 7b0:	85 83       	std	Z+5, r24	; 0x05
 7b2:	8c e0       	ldi	r24, 0x0C	; 12
 7b4:	86 83       	std	Z+6, r24	; 0x06
 7b6:	80 e4       	ldi	r24, 0x40	; 64
 7b8:	87 83       	std	Z+7, r24	; 0x07
 7ba:	83 81       	ldd	r24, Z+3	; 0x03
 7bc:	80 61       	ori	r24, 0x10	; 16
 7be:	83 83       	std	Z+3, r24	; 0x03
 7c0:	84 81       	ldd	r24, Z+4	; 0x04
 7c2:	80 61       	ori	r24, 0x10	; 16
 7c4:	84 83       	std	Z+4, r24	; 0x04
 7c6:	84 81       	ldd	r24, Z+4	; 0x04
 7c8:	88 60       	ori	r24, 0x08	; 8
 7ca:	84 83       	std	Z+4, r24	; 0x04
 7cc:	08 95       	ret

000007ce <usart_update_taus32>:
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	2c 97       	sbiw	r28, 0x0c	; 12
 7d8:	cd bf       	out	0x3d, r28	; 61
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	fc 01       	movw	r30, r24
 7de:	84 81       	ldd	r24, Z+4	; 0x04
 7e0:	95 81       	ldd	r25, Z+5	; 0x05
 7e2:	a6 81       	ldd	r26, Z+6	; 0x06
 7e4:	b7 81       	ldd	r27, Z+7	; 0x07
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	9a 83       	std	Y+2, r25	; 0x02
 7ea:	ab 83       	std	Y+3, r26	; 0x03
 7ec:	bc 83       	std	Y+4, r27	; 0x04
 7ee:	80 85       	ldd	r24, Z+8	; 0x08
 7f0:	91 85       	ldd	r25, Z+9	; 0x09
 7f2:	a2 85       	ldd	r26, Z+10	; 0x0a
 7f4:	b3 85       	ldd	r27, Z+11	; 0x0b
 7f6:	8d 83       	std	Y+5, r24	; 0x05
 7f8:	9e 83       	std	Y+6, r25	; 0x06
 7fa:	af 83       	std	Y+7, r26	; 0x07
 7fc:	b8 87       	std	Y+8, r27	; 0x08
 7fe:	84 85       	ldd	r24, Z+12	; 0x0c
 800:	95 85       	ldd	r25, Z+13	; 0x0d
 802:	a6 85       	ldd	r26, Z+14	; 0x0e
 804:	b7 85       	ldd	r27, Z+15	; 0x0f
 806:	89 87       	std	Y+9, r24	; 0x09
 808:	9a 87       	std	Y+10, r25	; 0x0a
 80a:	ab 87       	std	Y+11, r26	; 0x0b
 80c:	bc 87       	std	Y+12, r27	; 0x0c
 80e:	29 81       	ldd	r18, Y+1	; 0x01
 810:	3a 81       	ldd	r19, Y+2	; 0x02
 812:	4b 81       	ldd	r20, Y+3	; 0x03
 814:	5c 81       	ldd	r21, Y+4	; 0x04
 816:	6a e2       	ldi	r22, 0x2A	; 42
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	94 de       	rcall	.-728    	; 0x544 <timers_tau_init32>
 81c:	2d 81       	ldd	r18, Y+5	; 0x05
 81e:	3e 81       	ldd	r19, Y+6	; 0x06
 820:	4f 81       	ldd	r20, Y+7	; 0x07
 822:	58 85       	ldd	r21, Y+8	; 0x08
 824:	6c e2       	ldi	r22, 0x2C	; 44
 826:	80 e4       	ldi	r24, 0x40	; 64
 828:	8d de       	rcall	.-742    	; 0x544 <timers_tau_init32>
 82a:	29 85       	ldd	r18, Y+9	; 0x09
 82c:	3a 85       	ldd	r19, Y+10	; 0x0a
 82e:	4b 85       	ldd	r20, Y+11	; 0x0b
 830:	5c 85       	ldd	r21, Y+12	; 0x0c
 832:	6e e2       	ldi	r22, 0x2E	; 46
 834:	80 e8       	ldi	r24, 0x80	; 128
 836:	86 de       	rcall	.-756    	; 0x544 <timers_tau_init32>
 838:	2c 96       	adiw	r28, 0x0c	; 12
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	de bf       	out	0x3e, r29	; 62
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <usart_disable_outputs32>:
// ===========================================================
// Turns off all of the pulse outputs, including the master
// ===========================================================
void usart_disable_outputs32(void) {
	
	MASTERL.CTRLA = ( MASTERL.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
 844:	e0 e0       	ldi	r30, 0x00	; 0
 846:	f8 e0       	ldi	r31, 0x08	; 8
 848:	80 81       	ld	r24, Z
 84a:	80 7f       	andi	r24, 0xF0	; 240
 84c:	80 83       	st	Z, r24
	MASTERH.CTRLA = ( MASTERH.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
 84e:	e0 e0       	ldi	r30, 0x00	; 0
 850:	f9 e0       	ldi	r31, 0x09	; 9
 852:	80 81       	ld	r24, Z
 854:	80 7f       	andi	r24, 0xF0	; 240
 856:	80 83       	st	Z, r24
 858:	08 95       	ret

0000085a <usart_update_pulsewidths>:
}

// ===========================================================
// Update the pulse widths of the three slave clock outputs
// ===========================================================
void usart_update_pulsewidths(uint32_t *parameters) {
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	ec 01       	movw	r28, r24

	timers_set_pulse_width(	&CLOCK1.CCA,
 860:	4c 81       	ldd	r20, Y+4	; 0x04
 862:	5d 81       	ldd	r21, Y+5	; 0x05
 864:	66 e6       	ldi	r22, 0x66	; 102
 866:	79 e0       	ldi	r23, 0x09	; 9
 868:	88 e6       	ldi	r24, 0x68	; 104
 86a:	99 e0       	ldi	r25, 0x09	; 9
 86c:	7b df       	rcall	.-266    	; 0x764 <timers_set_pulse_width>
							&CLOCK1.PER,
							parameters[1]);	

	timers_set_pulse_width(	&CLOCK2.CCA,
 86e:	48 85       	ldd	r20, Y+8	; 0x08
 870:	59 85       	ldd	r21, Y+9	; 0x09
 872:	66 e6       	ldi	r22, 0x66	; 102
 874:	7a e0       	ldi	r23, 0x0A	; 10
 876:	88 e6       	ldi	r24, 0x68	; 104
 878:	9a e0       	ldi	r25, 0x0A	; 10
 87a:	74 df       	rcall	.-280    	; 0x764 <timers_set_pulse_width>
							&CLOCK2.PER,
							parameters[2]);	

	timers_set_pulse_width(	&CLOCK3.CCA,
 87c:	4c 85       	ldd	r20, Y+12	; 0x0c
 87e:	5d 85       	ldd	r21, Y+13	; 0x0d
 880:	66 e6       	ldi	r22, 0x66	; 102
 882:	7b e0       	ldi	r23, 0x0B	; 11
 884:	88 e6       	ldi	r24, 0x68	; 104
 886:	9b e0       	ldi	r25, 0x0B	; 11
 888:	6d df       	rcall	.-294    	; 0x764 <timers_set_pulse_width>
							&CLOCK3.PER,
							parameters[3]);	

}
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	08 95       	ret

00000890 <usart_parsebuffer>:

// ===========================================================
// usart_parsebuffer() processes the commands received on the
// USART and initiates the requested action.
// ===========================================================
void usart_parsebuffer(void){
 890:	ef 92       	push	r14
 892:	ff 92       	push	r15
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	62 97       	sbiw	r28, 0x12	; 18
 8a2:	cd bf       	out	0x3d, r28	; 61
 8a4:	de bf       	out	0x3e, r29	; 62
	char *usart_substring[50];
	char command;

	uint32_t parameter_array[4];

	const char delimiter[] = ",";
 8a6:	8c e2       	ldi	r24, 0x2C	; 44
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	89 8b       	std	Y+17, r24	; 0x11
 8ac:	9a 8b       	std	Y+18, r25	; 0x12
	
	int i = -1;

	// disable USART interrupts while processing so the data
	// doesn't get corrupted
	USART.CTRLA &= USART_RXCINTLVL_OFF_gc;
 8ae:	e0 ea       	ldi	r30, 0xA0	; 160
 8b0:	f8 e0       	ldi	r31, 0x08	; 8
 8b2:	83 81       	ldd	r24, Z+3	; 0x03
 8b4:	13 82       	std	Z+3, r1	; 0x03

	// Extract first substring (command)
	usart_substring[++i] = strtok(usart_buffer, delimiter);
 8b6:	be 01       	movw	r22, r28
 8b8:	6f 5e       	subi	r22, 0xEF	; 239
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	83 e0       	ldi	r24, 0x03	; 3
 8be:	90 e2       	ldi	r25, 0x20	; 32
 8c0:	06 d2       	rcall	.+1036   	; 0xcce <strtok>

	// Store the command as single ASCII character
	command = *usart_substring[0];
 8c2:	fc 01       	movw	r30, r24
 8c4:	f0 80       	ld	r15, Z
 8c6:	8e 01       	movw	r16, r28
 8c8:	0b 5f       	subi	r16, 0xFB	; 251
 8ca:	1f 4f       	sbci	r17, 0xFF	; 255

	// Extract remaining strings, convert to 32-bit long ints,
	// store in parameter_array[]
	while ( (usart_substring[++i] = strtok(NULL, delimiter)) != NULL)
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <usart_parsebuffer+0x4c>
	{
	   parameter_array[i] = atol(usart_substring[i]);
 8ce:	d9 d1       	rcall	.+946    	; 0xc82 <atol>
 8d0:	f8 01       	movw	r30, r16
 8d2:	61 93       	st	Z+, r22
 8d4:	71 93       	st	Z+, r23
 8d6:	81 93       	st	Z+, r24
 8d8:	91 93       	st	Z+, r25
 8da:	8f 01       	movw	r16, r30
	// Store the command as single ASCII character
	command = *usart_substring[0];

	// Extract remaining strings, convert to 32-bit long ints,
	// store in parameter_array[]
	while ( (usart_substring[++i] = strtok(NULL, delimiter)) != NULL)
 8dc:	be 01       	movw	r22, r28
 8de:	6f 5e       	subi	r22, 0xEF	; 239
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	f3 d1       	rcall	.+998    	; 0xcce <strtok>
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	89 f7       	brne	.-30     	; 0x8ce <usart_parsebuffer+0x3e>
	{
	   parameter_array[i] = atol(usart_substring[i]);
	}

	switch (command) {
 8ec:	f4 e5       	ldi	r31, 0x54	; 84
 8ee:	ff 16       	cp	r15, r31
 8f0:	f1 f0       	breq	.+60     	; 0x92e <usart_parsebuffer+0x9e>
 8f2:	ff 15       	cp	r31, r15
 8f4:	3c f0       	brlt	.+14     	; 0x904 <usart_parsebuffer+0x74>
 8f6:	8d e4       	ldi	r24, 0x4D	; 77
 8f8:	f8 16       	cp	r15, r24
 8fa:	59 f0       	breq	.+22     	; 0x912 <usart_parsebuffer+0x82>
 8fc:	e2 e5       	ldi	r30, 0x52	; 82
 8fe:	fe 16       	cp	r15, r30
 900:	81 f0       	breq	.+32     	; 0x922 <usart_parsebuffer+0x92>
 902:	1f c0       	rjmp	.+62     	; 0x942 <usart_parsebuffer+0xb2>
 904:	f7 e5       	ldi	r31, 0x57	; 87
 906:	ff 16       	cp	r15, r31
 908:	b1 f0       	breq	.+44     	; 0x936 <usart_parsebuffer+0xa6>
 90a:	88 e5       	ldi	r24, 0x58	; 88
 90c:	f8 16       	cp	r15, r24
 90e:	b9 f0       	breq	.+46     	; 0x93e <usart_parsebuffer+0xae>
 910:	18 c0       	rjmp	.+48     	; 0x942 <usart_parsebuffer+0xb2>

		// Set the pulse width of the master clock
		// (CLOCK0)
		case 'M':
			timers_set_pulse_width(	&CLOCK0.CCA,
 912:	4d 81       	ldd	r20, Y+5	; 0x05
 914:	5e 81       	ldd	r21, Y+6	; 0x06
 916:	66 e6       	ldi	r22, 0x66	; 102
 918:	78 e0       	ldi	r23, 0x08	; 8
 91a:	88 e6       	ldi	r24, 0x68	; 104
 91c:	98 e0       	ldi	r25, 0x08	; 8
 91e:	22 df       	rcall	.-444    	; 0x764 <timers_set_pulse_width>
									&CLOCK0.PER,
									parameter_array[1] );
			break;
 920:	31 c0       	rjmp	.+98     	; 0x984 <usart_parsebuffer+0xf4>
		
		// Restart MASTERL with the specified period
		// eg. "R,100000" for 100ms
		case 'R':
			timers_master_init32(parameter_array[1]);
 922:	6d 81       	ldd	r22, Y+5	; 0x05
 924:	7e 81       	ldd	r23, Y+6	; 0x06
 926:	8f 81       	ldd	r24, Y+7	; 0x07
 928:	98 85       	ldd	r25, Y+8	; 0x08
 92a:	39 dd       	rcall	.-1422   	; 0x39e <timers_master_init32>
			break;
 92c:	2b c0       	rjmp	.+86     	; 0x984 <usart_parsebuffer+0xf4>

		case 'T':
			usart_update_taus32(parameter_array);
 92e:	ce 01       	movw	r24, r28
 930:	01 96       	adiw	r24, 0x01	; 1
 932:	4d df       	rcall	.-358    	; 0x7ce <usart_update_taus32>
			break;
 934:	27 c0       	rjmp	.+78     	; 0x984 <usart_parsebuffer+0xf4>

		case 'W':
			usart_update_pulsewidths(parameter_array);
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	8f df       	rcall	.-226    	; 0x85a <usart_update_pulsewidths>
			break;
 93c:	23 c0       	rjmp	.+70     	; 0x984 <usart_parsebuffer+0xf4>

		case 'X':
			usart_disable_outputs32();
 93e:	82 df       	rcall	.-252    	; 0x844 <usart_disable_outputs32>
			break;
 940:	21 c0       	rjmp	.+66     	; 0x984 <usart_parsebuffer+0xf4>
	while ( (usart_substring[++i] = strtok(NULL, delimiter)) != NULL)
	{
	   parameter_array[i] = atol(usart_substring[i]);
	}

	switch (command) {
 942:	1a e0       	ldi	r17, 0x0A	; 10
			break;

		default:
			//flash the LEDs
			for (uint8_t i=0; i<10; i++){
				LEDPORT.OUT = 0x00;
 944:	0f 2e       	mov	r0, r31
 946:	f0 e8       	ldi	r31, 0x80	; 128
 948:	ef 2e       	mov	r14, r31
 94a:	f6 e0       	ldi	r31, 0x06	; 6
 94c:	ff 2e       	mov	r15, r31
 94e:	f0 2d       	mov	r31, r0
				delay1ms(20);
				LEDPORT.OUT = 0xFF;
 950:	0f ef       	ldi	r16, 0xFF	; 255
			break;

		default:
			//flash the LEDs
			for (uint8_t i=0; i<10; i++){
				LEDPORT.OUT = 0x00;
 952:	f7 01       	movw	r30, r14
 954:	14 82       	std	Z+4, r1	; 0x04
				delay1ms(20);
 956:	84 e1       	ldi	r24, 0x14	; 20
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	67 dc       	rcall	.-1842   	; 0x22a <delay1ms>
				LEDPORT.OUT = 0xFF;
 95c:	f7 01       	movw	r30, r14
 95e:	04 83       	std	Z+4, r16	; 0x04
				delay1ms(20);
 960:	84 e1       	ldi	r24, 0x14	; 20
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	62 dc       	rcall	.-1852   	; 0x22a <delay1ms>
 966:	11 50       	subi	r17, 0x01	; 1
			usart_disable_outputs32();
			break;

		default:
			//flash the LEDs
			for (uint8_t i=0; i<10; i++){
 968:	a1 f7       	brne	.-24     	; 0x952 <usart_parsebuffer+0xc2>
 96a:	0c c0       	rjmp	.+24     	; 0x984 <usart_parsebuffer+0xf4>
			break;
	}//end of switch statement

	// Clear the USART buffer by filling it with null characters
	for (int i=0; i<=50; i++){
		usart_buffer[i] = 0;
 96c:	11 92       	st	Z+, r1
			}
			break;
	}//end of switch statement

	// Clear the USART buffer by filling it with null characters
	for (int i=0; i<=50; i++){
 96e:	e8 17       	cp	r30, r24
 970:	f9 07       	cpc	r31, r25
 972:	e1 f7       	brne	.-8      	; 0x96c <usart_parsebuffer+0xdc>
		usart_buffer[i] = 0;
	}

	// Write the next byte to the beginning of the buffer
	usart_counter = 0;
 974:	10 92 02 20 	sts	0x2002, r1

	// Re-enable USART interrupts
	USART.CTRLA |= USART_RXCINTLVL_LO_gc;
 978:	e0 ea       	ldi	r30, 0xA0	; 160
 97a:	f8 e0       	ldi	r31, 0x08	; 8
 97c:	83 81       	ldd	r24, Z+3	; 0x03
 97e:	80 61       	ori	r24, 0x10	; 16
 980:	83 83       	std	Z+3, r24	; 0x03
 982:	05 c0       	rjmp	.+10     	; 0x98e <usart_parsebuffer+0xfe>
 984:	e3 e0       	ldi	r30, 0x03	; 3
 986:	f0 e2       	ldi	r31, 0x20	; 32
 988:	86 e3       	ldi	r24, 0x36	; 54
 98a:	90 e2       	ldi	r25, 0x20	; 32
 98c:	ef cf       	rjmp	.-34     	; 0x96c <usart_parsebuffer+0xdc>

}//end of usart_parsebuffer()
 98e:	62 96       	adiw	r28, 0x12	; 18
 990:	cd bf       	out	0x3d, r28	; 61
 992:	de bf       	out	0x3e, r29	; 62
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	ff 90       	pop	r15
 99e:	ef 90       	pop	r14
 9a0:	08 95       	ret

000009a2 <usart_rxbyte>:
// carriage return (0x0D) is received.
// ===========================================================
void usart_rxbyte(uint8_t rxbyte) {

		// Echo the received byte back on the TX pin
		USART.DATA = rxbyte;
 9a2:	80 93 a0 08 	sts	0x08A0, r24

		// Display the received byte on the LEDs
		LEDPORT.OUT = ~(rxbyte);
 9a6:	98 2f       	mov	r25, r24
 9a8:	90 95       	com	r25
 9aa:	90 93 84 06 	sts	0x0684, r25

		// Read out the received data
        if (rxbyte == 0x0d) {
 9ae:	8d 30       	cpi	r24, 0x0D	; 13
 9b0:	29 f4       	brne	.+10     	; 0x9bc <usart_rxbyte+0x1a>
			USART.DATA = 0x0a;
 9b2:	8a e0       	ldi	r24, 0x0A	; 10
 9b4:	80 93 a0 08 	sts	0x08A0, r24
			usart_parsebuffer();
 9b8:	6b cf       	rjmp	.-298    	; 0x890 <usart_parsebuffer>
 9ba:	08 95       	ret
		}
		else {
			usart_buffer[usart_counter] = rxbyte;
 9bc:	e0 91 02 20 	lds	r30, 0x2002
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	ed 5f       	subi	r30, 0xFD	; 253
 9c4:	ff 4d       	sbci	r31, 0xDF	; 223
 9c6:	80 83       	st	Z, r24
			usart_counter++;
 9c8:	80 91 02 20 	lds	r24, 0x2002
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	80 93 02 20 	sts	0x2002, r24
 9d2:	08 95       	ret

000009d4 <configure_system_clock>:
void configure_system_clock(void);

void configure_system_clock(void) {
	
	//Disable "configuration change protection"
	CCP = CCP_IOREG_gc;
 9d4:	88 ed       	ldi	r24, 0xD8	; 216
 9d6:	84 bf       	out	0x34, r24	; 52
	
	//Enable the 32MHz RC oscillator
	OSC.CTRL |= OSC_RC32MEN_bm;
 9d8:	e0 e5       	ldi	r30, 0x50	; 80
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	80 83       	st	Z, r24
	
	//Wait until the 32MHz oscillator is ready
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 9e2:	81 81       	ldd	r24, Z+1	; 0x01
 9e4:	81 ff       	sbrs	r24, 1
 9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <configure_system_clock+0xe>

	//Disable "configuration change protection"
	CCP = CCP_IOREG_gc;
 9e8:	88 ed       	ldi	r24, 0xD8	; 216
 9ea:	84 bf       	out	0x34, r24	; 52

	//SELECT 32MHZ OSC FOR SYSTEM CLOCK.
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	90 93 40 00 	sts	0x0040, r25
	
	//Disable "configuration change protection"
	CCP = CCP_IOREG_gc;
 9f2:	84 bf       	out	0x34, r24	; 52
	//Disable the other oscillators
	OSC.CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_PLLEN_bm);
 9f4:	e0 e5       	ldi	r30, 0x50	; 80
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	80 81       	ld	r24, Z
 9fa:	8a 7e       	andi	r24, 0xEA	; 234
 9fc:	80 83       	st	Z, r24
 9fe:	08 95       	ret

00000a00 <__vector_16>:
// When the TAU interrupt vector is reached,
// the DMA controller does this:
// CLOCKn.CNT = CLOCKn.CCA;
// which triggers a pulse output

ISR(TAU0L_VECT){} // MASTERL.CCA vector
 a00:	1f 92       	push	r1
 a02:	0f 92       	push	r0
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	0f 92       	push	r0
 a08:	11 24       	eor	r1, r1
 a0a:	08 b6       	in	r0, 0x38	; 56
 a0c:	0f 92       	push	r0
 a0e:	18 be       	out	0x38, r1	; 56
 a10:	0f 90       	pop	r0
 a12:	08 be       	out	0x38, r0	; 56
 a14:	0f 90       	pop	r0
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	0f 90       	pop	r0
 a1a:	1f 90       	pop	r1
 a1c:	18 95       	reti

00000a1e <__vector_17>:
ISR(TAU1L_VECT){} // MASTERL.CCB vector
 a1e:	1f 92       	push	r1
 a20:	0f 92       	push	r0
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	0f 92       	push	r0
 a26:	11 24       	eor	r1, r1
 a28:	08 b6       	in	r0, 0x38	; 56
 a2a:	0f 92       	push	r0
 a2c:	18 be       	out	0x38, r1	; 56
 a2e:	0f 90       	pop	r0
 a30:	08 be       	out	0x38, r0	; 56
 a32:	0f 90       	pop	r0
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	0f 90       	pop	r0
 a38:	1f 90       	pop	r1
 a3a:	18 95       	reti

00000a3c <__vector_18>:
ISR(TAU2L_VECT){} // MASTERL.CCC vector
 a3c:	1f 92       	push	r1
 a3e:	0f 92       	push	r0
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	0f 92       	push	r0
 a44:	11 24       	eor	r1, r1
 a46:	08 b6       	in	r0, 0x38	; 56
 a48:	0f 92       	push	r0
 a4a:	18 be       	out	0x38, r1	; 56
 a4c:	0f 90       	pop	r0
 a4e:	08 be       	out	0x38, r0	; 56
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	0f 90       	pop	r0
 a56:	1f 90       	pop	r1
 a58:	18 95       	reti

00000a5a <__vector_19>:
ISR(TAU3L_VECT){} // MASTERL.CCD vector
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	08 b6       	in	r0, 0x38	; 56
 a66:	0f 92       	push	r0
 a68:	18 be       	out	0x38, r1	; 56
 a6a:	0f 90       	pop	r0
 a6c:	08 be       	out	0x38, r0	; 56
 a6e:	0f 90       	pop	r0
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	0f 90       	pop	r0
 a74:	1f 90       	pop	r1
 a76:	18 95       	reti

00000a78 <__vector_79>:

ISR(TAU0H_VECT){} // MASTERH.CCA vector
 a78:	1f 92       	push	r1
 a7a:	0f 92       	push	r0
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	0f 92       	push	r0
 a80:	11 24       	eor	r1, r1
 a82:	08 b6       	in	r0, 0x38	; 56
 a84:	0f 92       	push	r0
 a86:	18 be       	out	0x38, r1	; 56
 a88:	0f 90       	pop	r0
 a8a:	08 be       	out	0x38, r0	; 56
 a8c:	0f 90       	pop	r0
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	0f 90       	pop	r0
 a92:	1f 90       	pop	r1
 a94:	18 95       	reti

00000a96 <__vector_80>:
ISR(TAU1H_VECT){} // MASTERH.CCB vector
 a96:	1f 92       	push	r1
 a98:	0f 92       	push	r0
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	0f 92       	push	r0
 a9e:	11 24       	eor	r1, r1
 aa0:	08 b6       	in	r0, 0x38	; 56
 aa2:	0f 92       	push	r0
 aa4:	18 be       	out	0x38, r1	; 56
 aa6:	0f 90       	pop	r0
 aa8:	08 be       	out	0x38, r0	; 56
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	0f 90       	pop	r0
 ab0:	1f 90       	pop	r1
 ab2:	18 95       	reti

00000ab4 <__vector_81>:
ISR(TAU2H_VECT){} // MASTERH.CCC vector
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	0f 92       	push	r0
 abc:	11 24       	eor	r1, r1
 abe:	08 b6       	in	r0, 0x38	; 56
 ac0:	0f 92       	push	r0
 ac2:	18 be       	out	0x38, r1	; 56
 ac4:	0f 90       	pop	r0
 ac6:	08 be       	out	0x38, r0	; 56
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <__vector_82>:
ISR(TAU3H_VECT){} // MASTERH.CCD vector
 ad2:	1f 92       	push	r1
 ad4:	0f 92       	push	r0
 ad6:	0f b6       	in	r0, 0x3f	; 63
 ad8:	0f 92       	push	r0
 ada:	11 24       	eor	r1, r1
 adc:	08 b6       	in	r0, 0x38	; 56
 ade:	0f 92       	push	r0
 ae0:	18 be       	out	0x38, r1	; 56
 ae2:	0f 90       	pop	r0
 ae4:	08 be       	out	0x38, r0	; 56
 ae6:	0f 90       	pop	r0
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	0f 90       	pop	r0
 aec:	1f 90       	pop	r1
 aee:	18 95       	reti

00000af0 <__vector_47>:

ISR(COUNTER1_OVF_VECT){} // COUNTER1 OVF vector
 af0:	1f 92       	push	r1
 af2:	0f 92       	push	r0
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	0f 92       	push	r0
 af8:	11 24       	eor	r1, r1
 afa:	08 b6       	in	r0, 0x38	; 56
 afc:	0f 92       	push	r0
 afe:	18 be       	out	0x38, r1	; 56
 b00:	0f 90       	pop	r0
 b02:	08 be       	out	0x38, r0	; 56
 b04:	0f 90       	pop	r0
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	0f 90       	pop	r0
 b0a:	1f 90       	pop	r1
 b0c:	18 95       	reti

00000b0e <__vector_108>:
ISR(COUNTER2_OVF_VECT){} // COUNTER2 OVF vector
 b0e:	1f 92       	push	r1
 b10:	0f 92       	push	r0
 b12:	0f b6       	in	r0, 0x3f	; 63
 b14:	0f 92       	push	r0
 b16:	11 24       	eor	r1, r1
 b18:	08 b6       	in	r0, 0x38	; 56
 b1a:	0f 92       	push	r0
 b1c:	18 be       	out	0x38, r1	; 56
 b1e:	0f 90       	pop	r0
 b20:	08 be       	out	0x38, r0	; 56
 b22:	0f 90       	pop	r0
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	0f 90       	pop	r0
 b28:	1f 90       	pop	r1
 b2a:	18 95       	reti

00000b2c <__vector_25>:

ISR(USART_VECT){
 b2c:	1f 92       	push	r1
 b2e:	0f 92       	push	r0
 b30:	0f b6       	in	r0, 0x3f	; 63
 b32:	0f 92       	push	r0
 b34:	11 24       	eor	r1, r1
 b36:	08 b6       	in	r0, 0x38	; 56
 b38:	0f 92       	push	r0
 b3a:	18 be       	out	0x38, r1	; 56
 b3c:	09 b6       	in	r0, 0x39	; 57
 b3e:	0f 92       	push	r0
 b40:	19 be       	out	0x39, r1	; 57
 b42:	0b b6       	in	r0, 0x3b	; 59
 b44:	0f 92       	push	r0
 b46:	1b be       	out	0x3b, r1	; 59
 b48:	2f 93       	push	r18
 b4a:	3f 93       	push	r19
 b4c:	4f 93       	push	r20
 b4e:	5f 93       	push	r21
 b50:	6f 93       	push	r22
 b52:	7f 93       	push	r23
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	af 93       	push	r26
 b5a:	bf 93       	push	r27
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31

	uint8_t rec_char;
	//Reading the data clears the interrupt flag
	rec_char = USART.DATA;
 b60:	80 91 a0 08 	lds	r24, 0x08A0
	usart_rxbyte(rec_char);
 b64:	1e df       	rcall	.-452    	; 0x9a2 <usart_rxbyte>
	
}//end of USART RX ISR
 b66:	ff 91       	pop	r31
 b68:	ef 91       	pop	r30
 b6a:	bf 91       	pop	r27
 b6c:	af 91       	pop	r26
 b6e:	9f 91       	pop	r25
 b70:	8f 91       	pop	r24
 b72:	7f 91       	pop	r23
 b74:	6f 91       	pop	r22
 b76:	5f 91       	pop	r21
 b78:	4f 91       	pop	r20
 b7a:	3f 91       	pop	r19
 b7c:	2f 91       	pop	r18
 b7e:	0f 90       	pop	r0
 b80:	0b be       	out	0x3b, r0	; 59
 b82:	0f 90       	pop	r0
 b84:	09 be       	out	0x39, r0	; 57
 b86:	0f 90       	pop	r0
 b88:	08 be       	out	0x38, r0	; 56
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <main>:
// ===========================================================
int main(void)
{

	// Disable all interrupts while initializing
	cli();
 b94:	f8 94       	cli

	// Configure DIOs

	PORTC.DIR = 0xFF; //All outputs
 b96:	e0 e4       	ldi	r30, 0x40	; 64
 b98:	f6 e0       	ldi	r31, 0x06	; 6
 b9a:	8f ef       	ldi	r24, 0xFF	; 255
 b9c:	80 83       	st	Z, r24
	PORTC.OUT = 0x00;
 b9e:	14 82       	std	Z+4, r1	; 0x04

	PORTD.DIR = 0xFF; //All outputs
 ba0:	e0 e6       	ldi	r30, 0x60	; 96
 ba2:	f6 e0       	ldi	r31, 0x06	; 6
 ba4:	80 83       	st	Z, r24
	PORTD.OUT = 0x00;
 ba6:	14 82       	std	Z+4, r1	; 0x04
	
	PORTF.DIR = 0xFF; //All outputs
 ba8:	e0 ea       	ldi	r30, 0xA0	; 160
 baa:	f6 e0       	ldi	r31, 0x06	; 6
 bac:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 bae:	14 82       	std	Z+4, r1	; 0x04
	// Configure System Clock using the PLL for a faster
	// peripheral clock
	// ClkCPU = 32MHz
	// ClkPER2 = 64
	// ClkPER4 = 128MHz
	configure_system_clock();
 bb0:	11 df       	rcall	.-478    	; 0x9d4 <configure_system_clock>

	// Initialize master clock
	timers_master_init32(9000);
 bb2:	68 e2       	ldi	r22, 0x28	; 40
 bb4:	73 e2       	ldi	r23, 0x23	; 35
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	f1 db       	rcall	.-2078   	; 0x39e <timers_master_init32>
/*	timers_tau_init32(	TAU0_CCA_bm,			//CCP channel bitmask for MASTERx.CTRLB
						TAU0offset,				//Offset from the address of MASTERx.CTRLA (first register address)
						0						//TauN (trigger) delay (us)
					 );
*/
	timers_tau_init32(	TAU1_CCB_bm,			//CCP channel bitmask for MASTERx.CTRLB
 bbc:	2a e0       	ldi	r18, 0x0A	; 10
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	40 e0       	ldi	r20, 0x00	; 0
 bc2:	50 e0       	ldi	r21, 0x00	; 0
 bc4:	6a e2       	ldi	r22, 0x2A	; 42
 bc6:	80 e2       	ldi	r24, 0x20	; 32
 bc8:	bd dc       	rcall	.-1670   	; 0x544 <timers_tau_init32>
						TAU1offset,				//Offset from the address of MASTERx.CTRLA (first register address)
						10						//TauN (trigger) delay (us)
					 );

	timers_tau_init32(	TAU2_CCC_bm,			//CCP channel bitmask for MASTERx.CTRLB
 bca:	24 e1       	ldi	r18, 0x14	; 20
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	40 e0       	ldi	r20, 0x00	; 0
 bd0:	50 e0       	ldi	r21, 0x00	; 0
 bd2:	6c e2       	ldi	r22, 0x2C	; 44
 bd4:	80 e4       	ldi	r24, 0x40	; 64
 bd6:	b6 dc       	rcall	.-1684   	; 0x544 <timers_tau_init32>
						TAU2offset,				//Offset from the address of MASTERx.CTRLA (first register address)
						20						//TauN (trigger) delay (us)
					 );

	timers_tau_init32(	TAU3_CCD_bm,			//CCP channel bitmask for MASTERx.CTRLB
 bd8:	2e e1       	ldi	r18, 0x1E	; 30
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	40 e0       	ldi	r20, 0x00	; 0
 bde:	50 e0       	ldi	r21, 0x00	; 0
 be0:	6e e2       	ldi	r22, 0x2E	; 46
 be2:	80 e8       	ldi	r24, 0x80	; 128
 be4:	af dc       	rcall	.-1698   	; 0x544 <timers_tau_init32>
						TAU3offset,				//Offset from the address of MASTERx.CTRLA (first register address)
						30						//TauN (trigger) delay (us)
					 );

	timers_init_all_clocks();
 be6:	1a dd       	rcall	.-1484   	; 0x61c <timers_init_all_clocks>

	timers_set_pulse_width(	&CLOCK0.CCA,
 be8:	48 ec       	ldi	r20, 0xC8	; 200
 bea:	50 e0       	ldi	r21, 0x00	; 0
 bec:	66 e6       	ldi	r22, 0x66	; 102
 bee:	78 e0       	ldi	r23, 0x08	; 8
 bf0:	88 e6       	ldi	r24, 0x68	; 104
 bf2:	98 e0       	ldi	r25, 0x08	; 8
 bf4:	b7 dd       	rcall	.-1170   	; 0x764 <timers_set_pulse_width>
							&CLOCK0.PER,
							200);
								
	timers_set_pulse_width(	&CLOCK1.CCA,
 bf6:	48 ec       	ldi	r20, 0xC8	; 200
 bf8:	50 e0       	ldi	r21, 0x00	; 0
 bfa:	66 e6       	ldi	r22, 0x66	; 102
 bfc:	79 e0       	ldi	r23, 0x09	; 9
 bfe:	88 e6       	ldi	r24, 0x68	; 104
 c00:	99 e0       	ldi	r25, 0x09	; 9
 c02:	b0 dd       	rcall	.-1184   	; 0x764 <timers_set_pulse_width>
							&CLOCK1.PER,
							200);	

	timers_set_pulse_width(	&CLOCK2.CCA,
 c04:	48 ec       	ldi	r20, 0xC8	; 200
 c06:	50 e0       	ldi	r21, 0x00	; 0
 c08:	66 e6       	ldi	r22, 0x66	; 102
 c0a:	7a e0       	ldi	r23, 0x0A	; 10
 c0c:	88 e6       	ldi	r24, 0x68	; 104
 c0e:	9a e0       	ldi	r25, 0x0A	; 10
 c10:	a9 dd       	rcall	.-1198   	; 0x764 <timers_set_pulse_width>
							&CLOCK2.PER,
							200);	

	timers_set_pulse_width(	&CLOCK3.CCA,
 c12:	48 ec       	ldi	r20, 0xC8	; 200
 c14:	50 e0       	ldi	r21, 0x00	; 0
 c16:	66 e6       	ldi	r22, 0x66	; 102
 c18:	7b e0       	ldi	r23, 0x0B	; 11
 c1a:	88 e6       	ldi	r24, 0x68	; 104
 c1c:	9b e0       	ldi	r25, 0x0B	; 11
 c1e:	a2 dd       	rcall	.-1212   	; 0x764 <timers_set_pulse_width>
							&CLOCK3.PER,
							200);	

	//Initialize USART
	usart_init();
 c20:	be dd       	rcall	.-1156   	; 0x79e <usart_init>

	//Initialize DMA controller
	dma_init();
 c22:	13 db       	rcall	.-2522   	; 0x24a <dma_init>

	//Interrupts: enable high priority interrupts in PMIC
	PMIC.CTRL |= PMIC_HILVLEN_bm;
 c24:	e0 ea       	ldi	r30, 0xA0	; 160
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	82 81       	ldd	r24, Z+2	; 0x02
 c2a:	84 60       	ori	r24, 0x04	; 4
 c2c:	82 83       	std	Z+2, r24	; 0x02
	
	//Interrupts: enable medium priority interrupts in PMIC
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
 c2e:	82 81       	ldd	r24, Z+2	; 0x02
 c30:	82 60       	ori	r24, 0x02	; 2
 c32:	82 83       	std	Z+2, r24	; 0x02

	//Interrupts: enable low priority interrupts in PMIC
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 c34:	82 81       	ldd	r24, Z+2	; 0x02
 c36:	81 60       	ori	r24, 0x01	; 1
 c38:	82 83       	std	Z+2, r24	; 0x02

	// Enable global interrupts once all the setup is done
	sei();
 c3a:	78 94       	sei

	//Infinite Loop - waiting for USART commands
	while (1)
	{
	}//end of while() loop
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <main+0xa8>

00000c3e <__udivmodsi4>:
 c3e:	a1 e2       	ldi	r26, 0x21	; 33
 c40:	1a 2e       	mov	r1, r26
 c42:	aa 1b       	sub	r26, r26
 c44:	bb 1b       	sub	r27, r27
 c46:	fd 01       	movw	r30, r26
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <__udivmodsi4_ep>

00000c4a <__udivmodsi4_loop>:
 c4a:	aa 1f       	adc	r26, r26
 c4c:	bb 1f       	adc	r27, r27
 c4e:	ee 1f       	adc	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	a2 17       	cp	r26, r18
 c54:	b3 07       	cpc	r27, r19
 c56:	e4 07       	cpc	r30, r20
 c58:	f5 07       	cpc	r31, r21
 c5a:	20 f0       	brcs	.+8      	; 0xc64 <__udivmodsi4_ep>
 c5c:	a2 1b       	sub	r26, r18
 c5e:	b3 0b       	sbc	r27, r19
 c60:	e4 0b       	sbc	r30, r20
 c62:	f5 0b       	sbc	r31, r21

00000c64 <__udivmodsi4_ep>:
 c64:	66 1f       	adc	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	1a 94       	dec	r1
 c6e:	69 f7       	brne	.-38     	; 0xc4a <__udivmodsi4_loop>
 c70:	60 95       	com	r22
 c72:	70 95       	com	r23
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	9b 01       	movw	r18, r22
 c7a:	ac 01       	movw	r20, r24
 c7c:	bd 01       	movw	r22, r26
 c7e:	cf 01       	movw	r24, r30
 c80:	08 95       	ret

00000c82 <atol>:
 c82:	1f 93       	push	r17
 c84:	fc 01       	movw	r30, r24
 c86:	99 27       	eor	r25, r25
 c88:	88 27       	eor	r24, r24
 c8a:	bc 01       	movw	r22, r24
 c8c:	e8 94       	clt
 c8e:	11 91       	ld	r17, Z+
 c90:	10 32       	cpi	r17, 0x20	; 32
 c92:	e9 f3       	breq	.-6      	; 0xc8e <atol+0xc>
 c94:	19 30       	cpi	r17, 0x09	; 9
 c96:	10 f0       	brcs	.+4      	; 0xc9c <atol+0x1a>
 c98:	1e 30       	cpi	r17, 0x0E	; 14
 c9a:	c8 f3       	brcs	.-14     	; 0xc8e <atol+0xc>
 c9c:	1b 32       	cpi	r17, 0x2B	; 43
 c9e:	49 f0       	breq	.+18     	; 0xcb2 <atol+0x30>
 ca0:	1d 32       	cpi	r17, 0x2D	; 45
 ca2:	41 f4       	brne	.+16     	; 0xcb4 <atol+0x32>
 ca4:	68 94       	set
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <atol+0x30>
 ca8:	3c d0       	rcall	.+120    	; 0xd22 <__mulsi_const_10>
 caa:	61 0f       	add	r22, r17
 cac:	71 1d       	adc	r23, r1
 cae:	81 1d       	adc	r24, r1
 cb0:	91 1d       	adc	r25, r1
 cb2:	11 91       	ld	r17, Z+
 cb4:	10 53       	subi	r17, 0x30	; 48
 cb6:	1a 30       	cpi	r17, 0x0A	; 10
 cb8:	b8 f3       	brcs	.-18     	; 0xca8 <atol+0x26>
 cba:	3e f4       	brtc	.+14     	; 0xcca <atol+0x48>
 cbc:	90 95       	com	r25
 cbe:	80 95       	com	r24
 cc0:	70 95       	com	r23
 cc2:	61 95       	neg	r22
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	1f 91       	pop	r17
 ccc:	08 95       	ret

00000cce <strtok>:
 cce:	40 e0       	ldi	r20, 0x00	; 0
 cd0:	50 e2       	ldi	r21, 0x20	; 32
 cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <strtok_r>

00000cd4 <strtok_r>:
 cd4:	fa 01       	movw	r30, r20
 cd6:	a1 91       	ld	r26, Z+
 cd8:	b0 81       	ld	r27, Z
 cda:	00 97       	sbiw	r24, 0x00	; 0
 cdc:	19 f4       	brne	.+6      	; 0xce4 <strtok_r+0x10>
 cde:	10 97       	sbiw	r26, 0x00	; 0
 ce0:	e1 f0       	breq	.+56     	; 0xd1a <strtok_r+0x46>
 ce2:	cd 01       	movw	r24, r26
 ce4:	dc 01       	movw	r26, r24
 ce6:	cd 01       	movw	r24, r26
 ce8:	0d 90       	ld	r0, X+
 cea:	00 20       	and	r0, r0
 cec:	11 f4       	brne	.+4      	; 0xcf2 <strtok_r+0x1e>
 cee:	c0 01       	movw	r24, r0
 cf0:	13 c0       	rjmp	.+38     	; 0xd18 <strtok_r+0x44>
 cf2:	fb 01       	movw	r30, r22
 cf4:	21 91       	ld	r18, Z+
 cf6:	22 23       	and	r18, r18
 cf8:	19 f0       	breq	.+6      	; 0xd00 <strtok_r+0x2c>
 cfa:	20 15       	cp	r18, r0
 cfc:	d9 f7       	brne	.-10     	; 0xcf4 <strtok_r+0x20>
 cfe:	f3 cf       	rjmp	.-26     	; 0xce6 <strtok_r+0x12>
 d00:	fb 01       	movw	r30, r22
 d02:	21 91       	ld	r18, Z+
 d04:	20 15       	cp	r18, r0
 d06:	19 f4       	brne	.+6      	; 0xd0e <strtok_r+0x3a>
 d08:	1e 92       	st	-X, r1
 d0a:	11 96       	adiw	r26, 0x01	; 1
 d0c:	06 c0       	rjmp	.+12     	; 0xd1a <strtok_r+0x46>
 d0e:	22 23       	and	r18, r18
 d10:	c1 f7       	brne	.-16     	; 0xd02 <strtok_r+0x2e>
 d12:	0d 90       	ld	r0, X+
 d14:	00 20       	and	r0, r0
 d16:	a1 f7       	brne	.-24     	; 0xd00 <strtok_r+0x2c>
 d18:	d0 01       	movw	r26, r0
 d1a:	fa 01       	movw	r30, r20
 d1c:	a1 93       	st	Z+, r26
 d1e:	b0 83       	st	Z, r27
 d20:	08 95       	ret

00000d22 <__mulsi_const_10>:
 d22:	59 2f       	mov	r21, r25
 d24:	48 2f       	mov	r20, r24
 d26:	37 2f       	mov	r19, r23
 d28:	26 2f       	mov	r18, r22
 d2a:	66 0f       	add	r22, r22
 d2c:	77 1f       	adc	r23, r23
 d2e:	88 1f       	adc	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	66 0f       	add	r22, r22
 d34:	77 1f       	adc	r23, r23
 d36:	88 1f       	adc	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	62 0f       	add	r22, r18
 d3c:	73 1f       	adc	r23, r19
 d3e:	84 1f       	adc	r24, r20
 d40:	95 1f       	adc	r25, r21
 d42:	66 0f       	add	r22, r22
 d44:	77 1f       	adc	r23, r23
 d46:	88 1f       	adc	r24, r24
 d48:	99 1f       	adc	r25, r25
 d4a:	08 95       	ret

00000d4c <_exit>:
 d4c:	f8 94       	cli

00000d4e <__stop_program>:
 d4e:	ff cf       	rjmp	.-2      	; 0xd4e <__stop_program>
